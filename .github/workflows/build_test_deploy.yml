name: Combined Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:
    workflow_id: deploy

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test

      - name: Build static file
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_test
    if: github.event_name == 'workflow_dispatch'

    env:
      AWS_CLOUDFRONT_DISTRIBUTION_ID_CNAME_ADD: E2OLQ8QC9NXQ5A
      AWS_CLOUDFRONT_DISTRIBUTION_ID_CNAME_REMOVE: E1QION2DS4X756
      S3_BUCKET_NAME: blue--www.blog.jamoroso.com

      VALUE_DNS_RECORD: d20q63b5qdls42.cloudfront.net
      HOSTED_ZONE_ID: Z0308801UI1T6XDOPWTE
      URL_CLOUDFRONT_DISTRIBUTION_BLUE: d20q63b5qdls42.cloudfront.net
      URL_CLOUDFRONT_DISTRIBUTION_GREEN: d16zfwcljh2bmo.cloudfront.net
      DOMAIN_NAME: green.blog.jamoroso.com

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build

      - name: Install jq
        run: sudo apt-get install jq

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: us-east-1

      - name: Get current Route 53 record value
        run: |
          RECORD_VALUE=$(aws route53 list-resource-record-sets --hosted-zone-id ${{ env.HOSTED_ZONE_ID }} --query "ResourceRecordSets[?Name=='${{ env.DOMAIN_NAME }}.']|[0].ResourceRecords[0].Value" --output text)
          echo "RECORD_VALUE=$RECORD_VALUE" >> $GITHUB_ENV


      - name: Set target S3 bucket, CloudFront distribution IDs and url cloudfront distribution
        run: |
          if [[ ${{ env.RECORD_VALUE }} == ${{ env.URL_CLOUDFRONT_DISTRIBUTION_BLUE }} ]]; then
            echo "S3_BUCKET_NAME=green-www.blog.jamoroso.com" >> $GITHUB_ENV
            echo "AWS_CLOUDFRONT_DISTRIBUTION_ID_CNAME_REMOVE=E2OLQ8QC9NXQ5A" >> $GITHUB_ENV
            echo "AWS_CLOUDFRONT_DISTRIBUTION_ID_CNAME_ADD=E1QION2DS4X756" >> $GITHUB_ENV
            echo "VALUE_DNS_RECORD=d16zfwcljh2bmo.cloudfront.net" >> $GITHUB_ENV

          else
            echo "S3_BUCKET_NAME=blue--www.blog.jamoroso.com" >> $GITHUB_ENV
            echo "AWS_CLOUDFRONT_DISTRIBUTION_ID_CNAME_REMOVE=E1QION2DS4X756" >> $GITHUB_ENV
            echo "AWS_CLOUDFRONT_DISTRIBUTION_ID_CNAME_ADD=E2OLQ8QC9NXQ5A" >> $GITHUB_ENV
            echo "VALUE_DNS_RECORD=d20q63b5qdls42.cloudfront.net" >> $GITHUB_ENV
          fi
      
      - name: Deploy static site to S3 bucket
        run: aws s3 sync ./build s3://${{ env.S3_BUCKET_NAME }} 
      
      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --distribution-id ${{ env.AWS_CLOUDFRONT_DISTRIBUTION_ID_CNAME_ADD }} --paths "/*"

      - name: update the value(url cloudfront) in DNS record json file
        run: jq '.Changes[0].ResourceRecordSet.ResourceRecords[0].Value = "${{ env.VALUE_DNS_RECORD }}"' record_route53/dns-update.json > dns-update-modified.json

      - name: Update DNS record
        run: |
          aws route53 change-resource-record-sets --hosted-zone-id ${{ env.HOSTED_ZONE_ID }} --change-batch file://dns-update-modified.json

      - name: Remove CNAME from CloudFront
        run: |
          # Step 1: Retrieve the current CloudFront distribution configuration
          aws cloudfront get-distribution-config --id ${{ env.AWS_CLOUDFRONT_DISTRIBUTION_ID_CNAME_REMOVE }} > distribution-config.json

          # Step 2: Modify the configuration to remove the CNAME (you can use a script, or a command-line tool like jq)
          #jq '.DistributionConfig.Aliases.Items = [] | .DistributionConfig.Aliases.Quantity = 0' distribution-config.json > modified-config.json
          jq '.DistributionConfig.Aliases.Items = [] | .DistributionConfig.Aliases.Quantity = 0 | .DistributionConfig' distribution-config.json > modified-config.json

          # Step 3: Update the CloudFront distribution with the modified configuration
          aws cloudfront update-distribution --id ${{ env.AWS_CLOUDFRONT_DISTRIBUTION_ID_CNAME_REMOVE }} --if-match $(jq -r '.ETag' distribution-config.json) --distribution-config file://modified-config.json
 
      - name: Wait for CloudFront distribution update to complete
        run: |
          counter=0
          while true; do
            status=$(aws cloudfront get-distribution --id ${{ env.AWS_CLOUDFRONT_DISTRIBUTION_ID_CNAME_REMOVE }} | jq -r '.Distribution.Status')
            if [ "$status" == "Deployed" ]; then
              echo "CloudFront distribution update completed"
              break
            elif [ $counter -ge 1 ]; then
              echo "Timed out waiting for CloudFront distribution update"
              break
            else
              echo "Waiting for CloudFront distribution update to complete..."
              sleep 60
              counter=$((counter+1))
            fi
          done


      - name: Add CNAME to CloudFront
        run: |
          # Step 1: Retrieve the current CloudFront distribution configuration
          aws cloudfront get-distribution-config --id ${{ env.AWS_CLOUDFRONT_DISTRIBUTION_ID_CNAME_ADD }} > distribution-config.json
          cat distribution-config.json

          # Step 2: Modify the configuration to add the CNAME
          jq '.DistributionConfig.Aliases.Items = ["${{ env.DOMAIN_NAME }}"] | .DistributionConfig.Aliases.Quantity = 1' distribution-config.json > modified-config.json

          # Step 3: Update the CloudFront distribution with the modified configuration in a loop
          success=false
          max_retries=60
          counter=0
          while [ $counter -lt $max_retries ]
          do
            if aws cloudfront update-distribution --id ${{ env.AWS_CLOUDFRONT_DISTRIBUTION_ID_CNAME_ADD }} --if-match $(jq -r '.ETag' distribution-config.json) --distribution-config file://modified-config.json; then
              success=true
              break
            else
              echo "Attempt $((counter+1)) to add CNAME failed. Retrying in 1 second..."
              sleep 3
              counter=$((counter+1))
            fi
          done

          if [ "$success" == "false" ]; then
            echo "Failed to add CNAME after $max_retries attempts"
            exit 1
          else
            echo "CNAME added successfully"
          fi

